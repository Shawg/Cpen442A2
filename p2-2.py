from collections import Counter
import random
import operator

englishFrequency = {'E': 12.70, 'T': 9.06, 'A': 8.17, 'O': 7.51, 'I': 6.97, 'N':
        6.75, 'S': 6.33, 'H': 6.09, 'R': 5.99, 'D': 4.25, 'L': 4.03, 'C': 2.78,
        'U': 2.76, 'M': 2.41, 'W': 2.36, 'F': 2.23, 'G': 2.02, 'Y': 1.97, 'P':
        1.93, 'B': 1.29, 'V': 0.98, 'K': 0.77, 'J': 0.15, 'X': 0.15, 'Q': 0.10,
        'Z': 0.07}

cipherText = 'ZLQWZFYUHVIZUREYZIYKHYUYQODFULPRQPWYNKCZSPDWCIZXBLPRQPQCHVUZZDXPXLFYQWRKCSEKHPQPWYYTLILRCIZKRCXYHYUQZDVUOIKDPRQPZAOFQUOCXTXRNEHVIZFOQUWYDSZXWVECBZZLBZSPVKULAECXIKEWMZXRWYXTOQZOTUPRQPPVROZAUWLTLQQXXYHAAZDZORDFPRQPWEEUZIXTXRKQDZWEMQUOYKIXYOBXKZNEWYUDZLQLTHSPZFRCEPWVCIZKZARLZAEDCZAUOAGIZKKQTHOYWNZRGMZIKYWYXYPQEWMZCIULEXIFXYSBEYZCRQCEEFDUPRQPQUNEZLOFZIZFILYKCTIOWVZCHMZCNKDZZXCDPRQPWYXTUOXNICKCSPZDVKQUZXTYCSDSKZEQYFZALNCNKZSPMIZOHYUQYXHVKSNEDZOKUQYCSDDZAEMVHDZKRCIKIFEKHPQPWYYKTACIHVLRWYPVKSOKTVYZYXUOONHVZIQWBIZKHVCRUZHBUOYVEWQOLDEKHMEXTVYIRNCKKZSPMIZOZYVASPSDAEOACFKDPUUPOFXPXHKYLRWYWEKQAEVDLQRCZRIFZYEIEKHPQPWYXCPIAPTVOQYKIXRKIDEKHPQPWYKCZLQPXGUOUYZIXTXRLAWYXNIKGWEKHPQPWYYTOYXTFOAECXRWWYKDWIUYCHZXHQQUZCBEPRQPWYKCZLDFPRCRKUPKIXLTCLACTQKZZXDVKZZLZOZFBIKZWEEKEQZUEKHPQPOFIFZFQZKOZXQPIDRPZIEKHPQPWYKDPRQPWEEKEQZUEKHPQPPUXLIZUOXPUXOKDVCIOKUQTVXEEXWVIKHDHVIZUOZIKUIZSKYIYFGMIZWEZOZFQZYXIZAEMVVAZPQPOCSYDZUOIYDFPRULPRQPYCZOWVHVUZLQRLBEPRQPQDHUAELTYIQWRKCSHVCRWYATWYKTUPDBQPXEYIVGUOPBYIICXIPIKIFUZYDVZXVAQAIKHDHVUIZIOMUZFIHDHVLRZUFHUZQUZUDVQDHVLOZROMOIZKBIKZHVLOZROLBEAEQZCZAWEQUYIOTHPIWEEUQIAEGIPQUOIXKYIBUZTUPRQPWYXCUOZFHVIRGWIZEKHPQPNEZLZIPUUXSPUQIDHVYIBVKIAODZVHZLQPHDZCBEPRQPZKUYHPRPIDAEEKHPQPWYXKZRZFPVKSYKQPRFIALSWSCIWICZPZYZUPIXQDZYHDZDWVIKGWWIKQDZWEDZIKCTCSHVLROYRZDZIALWIRMXUOZIZAYIZCYVUFXUOSAQIXZDRXKDPRQPHVKSHVUIOMUEIZZKFIEKEQWQCZZLXRWAZYZDWIQDRNZNWVYIZKDZQOHVIZHVWYALSKIFIXZKDZQDHVLILIIZZDWIWEPUDZHCUEOZGXUZTYKZPVIZIOZDZQUOXPUXHVIRGWIZTHSPSKZIZKMCPQULPRQPHVUIAEMVHDZKRCTVAOYFKXKZHVUZUFENTVIFHYZACVZLZOWKZOWYOMAWZOCZRZRQAOVADZZLZFQIIUOQIKZDCVZLZURLXVKYHVIOGOQAHVUIOACFKDEPZUHVIZNZIZHVPQUZPUZKRFHVIZIKHDHVUIKUSCPUUXIKHVYZPUWIBVZLRXIWBZZOQCSKQITHZIPQUQIXYIHVCRKUPOKSIZTYKZHVUIIBNZLOAZHTYIZKHVCRCIWEHVUZZBUOBLPRQPWYXNIBKOLTOYYVKUZRHYVUZRGMWYBCKRWYBDPRQPWYXIOYXLFQFIKZDECRAKBIZAIFZFQIZBLICIKZHVUZNRVHWEHVAZFIKZDECRAKBIZQAEZUZUZFQIFZXEYITHYIDCYIQXYWSCZIIKZDEUUFNOWYHDZKZCOQUOLTWICIAODFPRQPWYXTPQRLZOZKZFBZZLZLKYWEHVLRWYPVAWCSDZLAEKHPQPFYZDEXSPZFODXPFUXTXREKHPQPWYKCZLIYOACFKTEQXSXREKHPQPWYXKCSHVCRAKBILAWZIZHVFRQOZFQUKSPRQTZKIFIKZDRLDVORIFKCZLZUEUUFYIQVWERXIFZKSPMIZOTUPRQPWYXTUZOYXTLZKYHVLROAQZCZSPDVSPCKKZZLUQYXZLIWZKXFNUUFHVFOWYZCKCAPXECHZLQPWGZPUKYUCIHVCRAKBIZKRCALSCKLPRQPQCHDHVKSZLTVAECXEXOCZKHUQYMVZCBZZLPVPEIRLVYZUWRXUXWYYKXPXLYZEGOIIXUQIXZIUPZDWITUPRQPWYKCZLDGEQIXAOXVYZZPYUCIKZHVYZZULRCIZKRLZKRCRWYIBVPIWEOQEKHPQPWYXYUQYXZAZKSPMIZOTQCSZLWYVAIZCIIWSKRDZKENCKKZZUGZLILRPUEXPEUXOFXPEMNRVHEKHPQPWYXYNBAKIXZYWVEKRXUTWIQVWIHVIZEYYVIKZDOKTZLICIZKZLOQSPMIZOVQPIWIYIHVYZMCPIKIHVOZTHAUZBOYIXKZOFIFZFZRFQVHZKPUEPOAEQYITHYIDCZAENYUZDLUZKICRFIFQOZCYIZKRLZIZNIXDEZDZFIFHYTYKZDZOKUQEPWVPVXECRUERZIOEKCFNBCZSPMIZOTHKZKPUORPZILTZOTHYOWFOIOACVZLUYRDULCDPRQPQCZDUYLDLUCICIKSUPTHEKHPQPWYXTLOZRRXZUXBCZSPHVFOAECXHAOQCZZLEGOIIXUQIXZIUPZDWIUQSKXPFUZFDVTUPRQPWYNKAECXIWHTYIBFPRDEZAWVZADVZLQEYIHY'

def count_pairs(text):
    pairList = {}
    for i in range(0, len(text)-1):
        pair = text[i] + text[i+1]
        if ' ' not in pair:
            if pairList.has_key(pair):
                pairList[pair] += 1
            else:
                pairList.update({pair: 1})
    sorted_pairList = sorted(pairList.items(), key=operator.itemgetter(1))
    sorted_pairList.reverse()
    print sorted_pairList[0:20]

def count_tetra(text):
    pairList = {}
    for i in range(0, len(text)-10):
        tetra = text[i] + text[i+1] + text[i+2] + text[i+3] + text[i+4]
        if tetra[2] == ' ':
            if pairList.has_key(tetra):
                pairList[tetra] += 1
            else:
                pairList.update({tetra: 1})
    sorted_pairList = sorted(pairList.items(), key=operator.itemgetter(1))
    sorted_pairList.reverse()
    print sorted_pairList[0:20]

def count_quads(text):
    pairList = {}
    for i in range(0, len(text)-10):
        tetra = text[i] + text[i+1] + text[i+2] + text[i+3] + text[i+4]+ text[i+5]+ text[i+6]+ text[i+7]
        if tetra[2] == ' ':
            if pairList.has_key(tetra):
                pairList[tetra] += 1
            else:
                pairList.update({tetra: 1})
    sorted_pairList = sorted(pairList.items(), key=operator.itemgetter(1))
    sorted_pairList.reverse()
    print sorted_pairList[0:40]


# returns the "extended head" of a list
def head_pair(text):
    return text[0]+text[1]

# splits text into bigraphs for easier reading
def split_text(text):
    split_text = ''
    while len(text) > 0:
        split_text+=head_pair(text)
        split_text+=' '
        text = text[2:]
    return split_text


def letter_frequency(text):
    length = len(text)
    letters = Counter(text)
    for key in letters.keys():
        letters[key] = round((float(letters[key])/length)*100,2)
    return letters

splitCipher = split_text(cipherText)

grid = 'CLFEUDXNIYKPWOABMGRQTHVZS'
# grid = raw_input('input\n')

grid = grid.upper()
bestGrid = grid
print bestGrid

# print split_text(cipherText)
# print decrypt_message(grid, cipherText)
print count_pairs(split_text(cipherText))
print count_tetra(split_text(cipherText))
